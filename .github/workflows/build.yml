name: Docker Build (multiarch)

on:
    push:
    pull_request:
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                platform:
                    - linux/amd64
                    - linux/arm64
        runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
        permissions:
            actions: write
            contents: read
            packages: write
            id-token: write

        steps:
            - name: Prepare Build
              run: |
                  platform=${{ matrix.platform }}
                  echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install cosign
              if: github.event_name != 'pull_request'
              uses: sigstore/cosign-installer@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            - name: Build and push by digest
              id: build
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: ${{ matrix.platform }}
                  outputs: type=image,push-by-digest=true,name-canonical=true,push=true

            - name: Export digest
              run: |
                  mkdir -p ${{ runner.temp }}/digests
                  digest="${{ steps.build.outputs.digest }}"
                  touch "${{ runner.temp }}/digests/${digest#sha256:}"

            - name: Upload digest
              uses: actions/upload-artifact@v4
              with:
                  name: digests-${{ env.PLATFORM_PAIR }}
                  path: ${{ runner.temp }}/digests/*
                  if-no-files-found: error
                  retention-days: 1

    merge:
        runs-on: ubuntu-latest
        needs:
            - build
        steps:
            - name: Download digests
              uses: actions/download-artifact@v4
              with:
                  path: ${{ runner.temp }}/digests
                  pattern: digests-*
                  merge-multiple: true

            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,format=short,prefix=,suffix=
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Create manifest list and push
              working-directory: ${{ runner.temp }}/digests
              run: |
                  docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
                    $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

            - name: Inspect image
              run: |
                  docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
